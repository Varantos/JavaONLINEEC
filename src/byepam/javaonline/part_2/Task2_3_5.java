package byepam.javaonline.part_2;
/* Задача 3.5
* 	 СОРТИРОВКА ВСТАВКАМИ
*   Дана последовательность чисел: а(1),а(2),а(3), ... а(n). Требуется переставить числа в порядке возрастания.  
*   Делается  это  следующим  образом.  
*   Пусть а(1),а(2),а(3), ... а(i) - упорядоченная  последовательность, т.е.  Берется  следующее  число a(i+1)
*   и  вставляется  в  последовательность  так,  чтобы  новая последовательность была тоже возрастающей. 
*   Процесс производится до тех пор, пока все элементы от  i  до n не будут перебраны. 
*   Примечание. Место помещения очередного элемента в отсортированную часть производить с помощью двоичного поиска. 
*   Двоичный поиск оформить в виде отдельной функции. 
*/
import global.Global;

public class Task2_3_5 {
	public static void main(String[] args) {
		int n=9;
		
		int i=0;		
		int j=0;
	
		int ins=0;
		int tmp=0;
		
		int[] a = new int[n];	// создаем и заполняем первый массив
		a = Global.GenVectorInt_rnd(n);  //заполняем и выводим массив вконсоль
		

		System.out.println();
		
		for (i = 1; i < n; i++) {
		        ins = BinarySearch5 (a, 0, i, a[i]);
		        tmp = a[i];
		        for (j=i-1; j >=ins; j--)
		          a[j+1]=a[j];
		          a[ins]=tmp;
		    }
		System.out.println("ОТСОРТИРОВАНО ВСТАВКАМИ С БИНАРНЫМ ПОИСКОМ");
		for (i=0;i<=a.length-1;i++) System.out.print("\t"+a[i]);
	}
	
	//---------------------Бинарный поиск элемента в массиве
	/* 	Предпосылка: массив упорядочен.
	 *  Идея: сравнивайте число, которое нужно найти каждый раз, со средним элементом. 
	 *  Если оно меньше, чем средний элемент, оно будет найдено слева, если оно больше,
	 *  чем средний элемент, оно будет найдено справа.
	 */

//----------------------------------------------------------------
static int BinarySearch5 (int a[], int low, int high, int key){
    int mid;
    mid=low+((high-low)/2);
    
    if (low==high)
        return low;

    if (key>a[mid])
        return BinarySearch5 (a, mid+1, high, key);
    else if (key < a[mid])
        return BinarySearch5 (a, low, mid, key);

    return mid;
}

}
